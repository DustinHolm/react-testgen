// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator integration Tests ReactClass matches snapshot 1`] = `
Array [
  Array [
    Array [
      "mockOutput",
      "import { render, screen } from \\"@testing-library/react\\"
import ReactClass from \\"./ReactClass\\"


describe(\\"ReactClass Tests\\", () => {
    beforeEach(() => {
        resetMocks()
    })

    test(\\"Component renders\\", () => {
        whenComponentIsRendered()
        screen.debug()
    })
})

function resetMocks() {
    resetPropContent()
    resetMockReactClassDependency()
    resetMockUtilitySquareFunction()
}

let mockReactClassDependency: jest.Mock
let mockReactClassDependencyReturn: JSX.Element
function resetMockReactClassDependency() {
    mockReactClassDependencyReturn = <span data-testid={\\"mockReactClassDependency\\"} />
    mockReactClassDependency = jest.fn(() => mockReactClassDependencyReturn)
}

jest.mock(\\"./ReactClassDependency\\", () => ({
    __esModule: true,
    default: (...args: any[]) => mockReactClassDependency(args),
}))

let mockUtilitySquareFunction: jest.Mock
let mockUtilitySquareFunctionReturn: number
function resetMockUtilitySquareFunction() {
    mockUtilitySquareFunctionReturn = 1234
    mockUtilitySquareFunction = jest.fn(() => mockUtilitySquareFunctionReturn)
}
function givenMockUtilitySquareFunctionReturn(given: number) {
    mockUtilitySquareFunctionReturn = given
}

jest.mock(\\"./utilityFunctions\\", () => ({
    utilitySquareFunction: (...args: any[]) => mockUtilitySquareFunction(args),
}))

let propContent: string
function resetPropContent() {
    propContent = \\"abcd\\"
}
function givenPropContent(given: string) {
    propContent = given
}

function whenComponentIsRendered() {
    return render(
        <ReactClass
            content={propContent}
        />
    )
}

function thenReactClassDependencyIsRendered(expected: boolean) {
    if (expected) {
        expect(screen.getByTestId(\\"mockReactClassDependency\\")).toBeInTheDocument()
    } else {
        expect(screen.queryByTestId(\\"mockReactClassDependency\\")).toBeNull()
    }
}

function thenReactClassDependencyWasCalledWith(props: any) {
    expect(mockReactClassDependency).toHaveBeenCalledWith([props])
}

function thenUtilitySquareFunctionWasCalledWith(value: number) {
    expect(mockUtilitySquareFunction).toHaveBeenCalledWith([value])
}
",
    ],
  ],
]
`;

exports[`generator integration Tests ReactFC matches snapshot 1`] = `
Array [
  Array [
    Array [
      "mockOutput",
      "import { render, screen } from \\"@testing-library/react\\"
import ReactFC from \\"./ReactFC\\"


describe(\\"ReactFC Tests\\", () => {
    beforeEach(() => {
        resetMocks()
    })

    test(\\"Component renders\\", () => {
        whenComponentIsRendered()
        screen.debug()
    })
})

function resetMocks() {
    resetPropContent()
    resetMockReactFCDependency()
    resetMockUtilitySquareFunction()
}

let mockReactFCDependency: jest.Mock
let mockReactFCDependencyReturn: JSX.Element
function resetMockReactFCDependency() {
    mockReactFCDependencyReturn = <span data-testid={\\"mockReactFCDependency\\"} />
    mockReactFCDependency = jest.fn(() => mockReactFCDependencyReturn)
}

jest.mock(\\"./ReactFCDependency\\", () => ({
    __esModule: true,
    default: (...args: any[]) => mockReactFCDependency(args),
}))

let mockUtilitySquareFunction: jest.Mock
let mockUtilitySquareFunctionReturn: number
function resetMockUtilitySquareFunction() {
    mockUtilitySquareFunctionReturn = 1234
    mockUtilitySquareFunction = jest.fn(() => mockUtilitySquareFunctionReturn)
}
function givenMockUtilitySquareFunctionReturn(given: number) {
    mockUtilitySquareFunctionReturn = given
}

jest.mock(\\"./utilityFunctions\\", () => ({
    utilitySquareFunction: (...args: any[]) => mockUtilitySquareFunction(args),
}))

let propContent: string
function resetPropContent() {
    propContent = \\"abcd\\"
}
function givenPropContent(given: string) {
    propContent = given
}

function whenComponentIsRendered() {
    return render(
        <ReactFC
            content={propContent}
        />
    )
}

function thenReactFCDependencyIsRendered(expected: boolean) {
    if (expected) {
        expect(screen.getByTestId(\\"mockReactFCDependency\\")).toBeInTheDocument()
    } else {
        expect(screen.queryByTestId(\\"mockReactFCDependency\\")).toBeNull()
    }
}

function thenReactFCDependencyWasCalledWith(props: any) {
    expect(mockReactFCDependency).toHaveBeenCalledWith([props])
}

function thenUtilitySquareFunctionWasCalledWith(value: number) {
    expect(mockUtilitySquareFunction).toHaveBeenCalledWith([value])
}
",
    ],
  ],
]
`;

exports[`generator integration Tests ReactFunction matches snapshot 1`] = `
Array [
  Array [
    Array [
      "mockOutput",
      "import { render, screen } from \\"@testing-library/react\\"
import ReactFunction from \\"./ReactFunction\\"


describe(\\"ReactFunction Tests\\", () => {
    beforeEach(() => {
        resetMocks()
    })

    test(\\"Component renders\\", () => {
        whenComponentIsRendered()
        screen.debug()
    })
})

function resetMocks() {
    resetPropContent()
    resetMockReactFCDependency()
    resetMockUtilitySquareFunction()
}

let mockReactFCDependency: jest.Mock
let mockReactFCDependencyReturn: JSX.Element
function resetMockReactFCDependency() {
    mockReactFCDependencyReturn = <span data-testid={\\"mockReactFCDependency\\"} />
    mockReactFCDependency = jest.fn(() => mockReactFCDependencyReturn)
}

jest.mock(\\"./ReactFCDependency\\", () => ({
    __esModule: true,
    default: (...args: any[]) => mockReactFCDependency(args),
}))

let mockUtilitySquareFunction: jest.Mock
let mockUtilitySquareFunctionReturn: number
function resetMockUtilitySquareFunction() {
    mockUtilitySquareFunctionReturn = 1234
    mockUtilitySquareFunction = jest.fn(() => mockUtilitySquareFunctionReturn)
}
function givenMockUtilitySquareFunctionReturn(given: number) {
    mockUtilitySquareFunctionReturn = given
}

jest.mock(\\"./utilityFunctions\\", () => ({
    utilitySquareFunction: (...args: any[]) => mockUtilitySquareFunction(args),
}))

let propContent: string
function resetPropContent() {
    propContent = \\"abcd\\"
}
function givenPropContent(given: string) {
    propContent = given
}

function whenComponentIsRendered() {
    return render(
        <ReactFunction
            content={propContent}
        />
    )
}

function thenReactFCDependencyIsRendered(expected: boolean) {
    if (expected) {
        expect(screen.getByTestId(\\"mockReactFCDependency\\")).toBeInTheDocument()
    } else {
        expect(screen.queryByTestId(\\"mockReactFCDependency\\")).toBeNull()
    }
}

function thenReactFCDependencyWasCalledWith(props: any) {
    expect(mockReactFCDependency).toHaveBeenCalledWith([props])
}

function thenUtilitySquareFunctionWasCalledWith(value: number) {
    expect(mockUtilitySquareFunction).toHaveBeenCalledWith([value])
}
",
    ],
  ],
]
`;

exports[`generator integration Tests ReactMemoizedFC matches snapshot 1`] = `
Array [
  Array [
    Array [
      "mockOutput",
      "import { render, screen } from \\"@testing-library/react\\"
import ReactMemoizedFC from \\"./ReactMemoizedFC\\"


describe(\\"ReactMemoizedFC Tests\\", () => {
    beforeEach(() => {
        resetMocks()
    })

    test(\\"Component renders\\", () => {
        whenComponentIsRendered()
        screen.debug()
    })
})

function resetMocks() {
    resetPropContent()
    resetMockReactFCDependency()
    resetMockUtilitySquareFunction()
}

let mockReactFCDependency: jest.Mock
let mockReactFCDependencyReturn: JSX.Element
function resetMockReactFCDependency() {
    mockReactFCDependencyReturn = <span data-testid={\\"mockReactFCDependency\\"} />
    mockReactFCDependency = jest.fn(() => mockReactFCDependencyReturn)
}

jest.mock(\\"./ReactFCDependency\\", () => ({
    __esModule: true,
    default: (...args: any[]) => mockReactFCDependency(args),
}))

let mockUtilitySquareFunction: jest.Mock
let mockUtilitySquareFunctionReturn: number
function resetMockUtilitySquareFunction() {
    mockUtilitySquareFunctionReturn = 1234
    mockUtilitySquareFunction = jest.fn(() => mockUtilitySquareFunctionReturn)
}
function givenMockUtilitySquareFunctionReturn(given: number) {
    mockUtilitySquareFunctionReturn = given
}

jest.mock(\\"./utilityFunctions\\", () => ({
    utilitySquareFunction: (...args: any[]) => mockUtilitySquareFunction(args),
}))

let propContent: string
function resetPropContent() {
    propContent = \\"abcd\\"
}
function givenPropContent(given: string) {
    propContent = given
}

function whenComponentIsRendered() {
    return render(
        <ReactMemoizedFC
            content={propContent}
        />
    )
}

function thenReactFCDependencyIsRendered(expected: boolean) {
    if (expected) {
        expect(screen.getByTestId(\\"mockReactFCDependency\\")).toBeInTheDocument()
    } else {
        expect(screen.queryByTestId(\\"mockReactFCDependency\\")).toBeNull()
    }
}

function thenReactFCDependencyWasCalledWith(props: any) {
    expect(mockReactFCDependency).toHaveBeenCalledWith([props])
}

function thenUtilitySquareFunctionWasCalledWith(value: number) {
    expect(mockUtilitySquareFunction).toHaveBeenCalledWith([value])
}
",
    ],
  ],
]
`;
