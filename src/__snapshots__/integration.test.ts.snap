// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Integration Tests ReactClass matches snapshot 1`] = `
"import { render, screen } from \\"@testing-library/react\\"
import { Component } from \\"react\\"
import ReactClassDependency from \\"./ReactClassDependency\\"
import { utilitySquareFunction } from \\"./utilityFunctions\\"


describe(\\"ReactClass Tests\\", () => {
    beforeEach(() => {
        resetMocks()
    })

    test(\\"Component renders\\", () => {
        whenComponentIsRendered()
        screen.debug()
    })
})

function resetMocks() {
    resetMockPropContent()
    resetMockReactClassDependency()
    resetMockUtilitySquareFunction()
}

let mockReactClassDependency: jest.Mock
let mockReactClassDependencyReturn: JSX.Element
function resetMockReactClassDependency() {
    mockReactClassDependencyReturn = <span data-testid={\\"mockReactClassDependency\\"} />
    mockReactClassDependency = jest.fn(() => mockReactClassDependencyReturn)
}
jest.mock(\\"./ReactClassDependency\\", () => ({
    __esmodule: true,
    default: (...args: any[]) => mockReactClassDependency(args),
})

let mockUtilitySquareFunction: jest.Mock
let mockUtilitySquareFunctionReturn: number
function resetMockUtilitySquareFunction() {
    mockUtilitySquareFunctionReturn = 1234
    mockUtilitySquareFunction = jest.fn(() => mockUtilitySquareFunctionReturn)
}
jest.mock(\\"./utilityFunctions\\", () => ({
    utilitySquareFunction: (...args: any[]) => mockUtilitySquareFunction(args),
})

let mockPropContent: string
function resetMockPropContent() {
    mockPropContent = \\"abcd\\"
}
function givenMockPropContent(given: string) {
    mockPropContent = given
}

function whenComponentIsRendered() {
    return render(
        <ReactClass
            content={mockPropContent}
        />
    )
}

"
`;

exports[`Integration Tests ReactFC matches snapshot 1`] = `
"import { render, screen } from \\"@testing-library/react\\"
import { FC, useState } from \\"react\\"
import ReactFCDependency from \\"./ReactFCDependency\\"
import { utilitySquareFunction } from \\"./utilityFunctions\\"


describe(\\"ReactFC Tests\\", () => {
    beforeEach(() => {
        resetMocks()
    })

    test(\\"Component renders\\", () => {
        whenComponentIsRendered()
        screen.debug()
    })
})

function resetMocks() {
    resetMockPropContent()
    resetMockReactFCDependency()
    resetMockUtilitySquareFunction()
}

let mockReactFCDependency: jest.Mock
let mockReactFCDependencyReturn: JSX.Element
function resetMockReactFCDependency() {
    mockReactFCDependencyReturn = <span data-testid={\\"mockReactFCDependency\\"} />
    mockReactFCDependency = jest.fn(() => mockReactFCDependencyReturn)
}
jest.mock(\\"./ReactFCDependency\\", () => ({
    __esmodule: true,
    default: (...args: any[]) => mockReactFCDependency(args),
})

let mockUtilitySquareFunction: jest.Mock
let mockUtilitySquareFunctionReturn: number
function resetMockUtilitySquareFunction() {
    mockUtilitySquareFunctionReturn = 1234
    mockUtilitySquareFunction = jest.fn(() => mockUtilitySquareFunctionReturn)
}
jest.mock(\\"./utilityFunctions\\", () => ({
    utilitySquareFunction: (...args: any[]) => mockUtilitySquareFunction(args),
})

let mockPropContent: string
function resetMockPropContent() {
    mockPropContent = \\"abcd\\"
}
function givenMockPropContent(given: string) {
    mockPropContent = given
}

function whenComponentIsRendered() {
    return render(
        <ReactFC
            content={mockPropContent}
        />
    )
}

"
`;

exports[`Integration Tests ReactFunction matches snapshot 1`] = `
"import { render, screen } from \\"@testing-library/react\\"
import { useState } from \\"react\\"
import ReactFCDependency from \\"./ReactFCDependency\\"
import { utilitySquareFunction } from \\"./utilityFunctions\\"


describe(\\"ReactFunction Tests\\", () => {
    beforeEach(() => {
        resetMocks()
    })

    test(\\"Component renders\\", () => {
        whenComponentIsRendered()
        screen.debug()
    })
})

function resetMocks() {
    resetMockPropContent()
    resetMockReactFCDependency()
    resetMockUtilitySquareFunction()
}

let mockReactFCDependency: jest.Mock
let mockReactFCDependencyReturn: JSX.Element
function resetMockReactFCDependency() {
    mockReactFCDependencyReturn = <span data-testid={\\"mockReactFCDependency\\"} />
    mockReactFCDependency = jest.fn(() => mockReactFCDependencyReturn)
}
jest.mock(\\"./ReactFCDependency\\", () => ({
    __esmodule: true,
    default: (...args: any[]) => mockReactFCDependency(args),
})

let mockUtilitySquareFunction: jest.Mock
let mockUtilitySquareFunctionReturn: number
function resetMockUtilitySquareFunction() {
    mockUtilitySquareFunctionReturn = 1234
    mockUtilitySquareFunction = jest.fn(() => mockUtilitySquareFunctionReturn)
}
jest.mock(\\"./utilityFunctions\\", () => ({
    utilitySquareFunction: (...args: any[]) => mockUtilitySquareFunction(args),
})

let mockPropContent: string
function resetMockPropContent() {
    mockPropContent = \\"abcd\\"
}
function givenMockPropContent(given: string) {
    mockPropContent = given
}

function whenComponentIsRendered() {
    return render(
        <ReactFunction
            content={mockPropContent}
        />
    )
}

"
`;
